import streamlit as st
import re
import pandas as pd
import py3Dmol
from io import BytesIO

# --- Full Periodic Table (1â€“118) ---
PERIODIC_TABLE = {
    1:"H", 2:"He",
    3:"Li", 4:"Be", 5:"B", 6:"C", 7:"N", 8:"O", 9:"F", 10:"Ne",
    11:"Na", 12:"Mg", 13:"Al", 14:"Si", 15:"P", 16:"S", 17:"Cl", 18:"Ar",
    19:"K", 20:"Ca", 21:"Sc", 22:"Ti", 23:"V", 24:"Cr", 25:"Mn", 26:"Fe", 27:"Co", 28:"Ni", 29:"Cu", 30:"Zn",
    31:"Ga", 32:"Ge", 33:"As", 34:"Se", 35:"Br", 36:"Kr",
    37:"Rb", 38:"Sr", 39:"Y", 40:"Zr", 41:"Nb", 42:"Mo", 43:"Tc", 44:"Ru", 45:"Rh", 46:"Pd", 47:"Ag", 48:"Cd",
    49:"In", 50:"Sn", 51:"Sb", 52:"Te", 53:"I", 54:"Xe",
    55:"Cs", 56:"Ba", 57:"La", 58:"Ce", 59:"Pr", 60:"Nd", 61:"Pm", 62:"Sm", 63:"Eu", 64:"Gd", 65:"Tb", 66:"Dy", 67:"Ho", 68:"Er", 69:"Tm", 70:"Yb", 71:"Lu",
    72:"Hf", 73:"Ta", 74:"W", 75:"Re", 76:"Os", 77:"Ir", 78:"Pt", 79:"Au", 80:"Hg",
    81:"Tl", 82:"Pb", 83:"Bi", 84:"Po", 85:"At", 86:"Rn",
    87:"Fr", 88:"Ra", 89:"Ac", 90:"Th", 91:"Pa", 92:"U", 93:"Np", 94:"Pu", 95:"Am", 96:"Cm", 97:"Bk", 98:"Cf", 99:"Es", 100:"Fm", 101:"Md", 102:"No", 103:"Lr",
    104:"Rf", 105:"Db", 106:"Sg", 107:"Bh", 108:"Hs", 109:"Mt", 110:"Ds", 111:"Rg", 112:"Cn",
    113:"Nh", 114:"Fl", 115:"Mc", 116:"Lv", 117:"Ts", 118:"Og"
}

# --- Parsing Functions ---
def parse_last_standard_orientation(file):
    atom_map, atom_coords = {}, []
    capture = False
    for line in file.splitlines():
        if "Standard orientation:" in line:
            capture, atom_map, atom_coords = True, {}, []
            continue
        if capture and "-----" in line:
            continue
        if capture:
            parts = line.split()
            if len(parts) == 6 and parts[0].isdigit() and parts[1].isdigit():
                try:
                    idx = int(parts[0])
                    atomic_num = int(parts[1])
                    x, y, z = map(float, parts[3:6])
                    sym = PERIODIC_TABLE.get(atomic_num, f"X{atomic_num}")
                    atom_map[idx] = f"{sym}{idx}"
                    atom_coords.append((sym, x, y, z))
                except:
                    continue
        if capture and line.strip() == "":
            capture = False
    return atom_map, atom_coords

def extract_optimized_parameters(file, atom_map):
    parameters = []
    for line in file.splitlines():
        match = re.match(r"\s*!\s+([RAD]\d+)\s+([RAD]\([\d,]+\))\s+(-?\d+\.\d+)", line)
        if match:
            name, definition, value = match.groups()
            value = float(value)
            atoms = list(map(int, re.findall(r"\d+", definition)))
            atoms_labeled = [atom_map.get(a, str(a)) for a in atoms]
            parameters.append({
                "Name": name,
                "Type": definition[0],
                "Atoms": "-".join(atoms_labeled),
                "Value": value
            })
    df = pd.DataFrame(parameters)
    return df

def split_parameters(df):
    bonds = df[df["Type"]=="R"].reset_index(drop=True)
    angles = df[df["Type"]=="A"].reset_index(drop=True)
    dihedrals = df[df["Type"]=="D"].reset_index(drop=True)
    return bonds, angles, dihedrals

def write_xyz(atom_coords):
    lines = [f"{len(atom_coords)}", "Optimized structure from Gaussian"]
    for sym, x, y, z in atom_coords:
        lines.append(f"{sym:2s} {x:12.6f} {y:12.6f} {z:12.6f}")
    return "\n".join(lines)

def write_mol(atom_coords):
    lines = ["Optimized structure from Gaussian", "  Generated by Streamlit\n"]
    natoms, nbonds = len(atom_coords), 0
    lines.append(f"{natoms:>3}{nbonds:>3}  0  0  0  0            999 V2000")
    for sym, x, y, z in atom_coords:
        lines.append(f"{x:10.4f}{y:10.4f}{z:10.4f} {sym:<3} 0  0  0  0  0  0  0  0  0  0")
    lines.append("M  END")
    return "\n".join(lines)

# --- Visualization ---
def show_3d(atom_coords, style_option):
    xyz = write_xyz(atom_coords)
    view = py3Dmol.view(width=600, height=500)
    view.addModel(xyz, "xyz")
    if style_option == "Ball and Stick":
        view.setStyle({"stick": {}, "sphere": {"scale": 0.25}})
    elif style_option == "Stick":
        view.setStyle({"stick": {}})
    elif style_option == "Sphere":
        view.setStyle({"sphere": {}})
    elif style_option == "Wireframe":
        view.setStyle({"line": {}})
    view.zoomTo()
    view.setBackgroundColor("#000000")  # Black background for contrast
    view.addBox({"center": {}, "dimensions": {"w": 10, "h": 10, "d": 10}, "color": "white", "opacity": 0.2})  # Add box frame
    return view

# --- Streamlit UI ---
st.title("Gaussian Optimized Structure Extractor")

uploaded_file = st.file_uploader("Upload Gaussian Output File (.out)", type=["out", "log"])
if uploaded_file is not None:
    content = uploaded_file.read().decode("utf-8", errors="ignore")

    atom_map, atom_coords = parse_last_standard_orientation(content)
    df = extract_optimized_parameters(content, atom_map)
    bonds, angles, dihedrals = split_parameters(df)

    # Save to Excel with 3 sheets
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
        bonds.to_excel(writer, sheet_name="Bonds", index=False)
        angles.to_excel(writer, sheet_name="Angles", index=False)
        dihedrals.to_excel(writer, sheet_name="Dihedrals", index=False)
    excel_buffer.seek(0)

    st.download_button(
        "Download Parameters (XLSX)",
        excel_buffer,
        "optimized_parameters.xlsx",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # Save XYZ
    xyz_text = write_xyz(atom_coords)
    st.download_button("Download Structure (XYZ)", xyz_text.encode("utf-8"), "optimized_structure.xyz", "text/plain")

    # Save MOL
    mol_text = write_mol(atom_coords)
    st.download_button("Download Structure (MOL)", mol_text.encode("utf-8"), "optimized_structure.mol", "text/plain")

    # Layout with two vertical containers
    with st.container():
        st.header("3D Molecular Structure")
        style_option = st.selectbox("Select Display Style", ["Ball and Stick", "Stick", "Sphere", "Wireframe"])
        if atom_coords:
            view = show_3d(atom_coords, style_option)
            st.components.v1.html(view._make_html(), height=500)

    with st.container():
        st.header("Optimized Parameters")
        st.subheader("Bonds (R)")
        st.dataframe(bonds)
        st.subheader("Angles (A)")
        st.dataframe(angles)
        st.subheader("Dihedrals (D)")
        st.dataframe(dihedrals)
